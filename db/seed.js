const db = require("./connection");
const format = require("pg-format");

module.exports = seed = ({
  cuisineData,
  restaurantData,
  tableData,
  userData,
  bookingData,
  openingTimesData,
}) => {
  return db
    .query(`DROP TABLE IF EXISTS bookings`)
    .then(() => db.query(`DROP TABLE IF EXISTS users;`))
    .then(() => db.query(`DROP TABLE IF EXISTS tables;`))
    .then(() => db.query(`DROP TABLE IF EXISTS opening_times;`))
    .then(() => db.query(`DROP TABLE IF EXISTS restaurants;`))
    .then(() => db.query(`DROP TABLE IF EXISTS cuisines;`))
    .then(() =>
      db.query(`
      CREATE TABLE cuisines (
        cuisine_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        name VARCHAR NOT NULL
      );
      `)
    )
    .then(() =>
      db.query(`
        CREATE TABLE restaurants (
          restaurant_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          restaurant_name VARCHAR NOT NULL,
          location POINT NOT NULL,
          cuisine_id INT REFERENCES cuisines ON DELETE CASCADE
        );
      `)
    )
    .then(() =>
      Promise.all([
        db.query(`
          CREATE TABLE tables (
            table_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            restaurant_id INT REFERENCES restaurants ON DELETE CASCADE,
            size INT NOT NULL
          );
        `),
        db.query(`
          CREATE TABLE users (
            user_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            name VARCHAR NOT NULL
          );
        `),
        db.query(`
          CREATE TABLE opening_times (
            restaurant_id INT REFERENCES restaurants ON DELETE CASCADE,
            opening_time TIMESTAMPTZ NOT NULL,
            closing_time TIMESTAMPTZ NOT NULL,
            PRIMARY KEY(restaurant_id, opening_time)
          );
        `),
      ])
    )
    .then(() =>
      db.query(`
          CREATE TABLE bookings (
            booking_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            start_time TIMESTAMPTZ NOT NULL,
            end_time TIMESTAMPTZ NOT NULL,
            party_size INT NOT NULL,
            table_id INT REFERENCES tables ON DELETE CASCADE,
            user_id INT REFERENCES users ON DELETE CASCADE
          );
        `)
    )
    .then(() =>
      db.query(
        format(
          `
          INSERT INTO cuisines (name) VALUES %L;
        `,
          cuisineData.map(({ cuisine }) => [cuisine])
        )
      )
    )
    .then(() =>
      db.query(
        format(
          `
          INSERT INTO restaurants (restaurant_name, location, cuisine_id) VALUES %L;
        `,
          restaurantData.map(({ name, latitude, longitude, cuisine_id }) => [
            name,
            `${latitude},${longitude}`,
            cuisine_id,
          ])
        )
      )
    )
    .then(() =>
      Promise.all([
        db.query(
          format(
            `
              INSERT INTO tables (size, restaurant_id) VALUES %L;
            `,
            tableData.map(({ size, restaurant_id }) => [size, restaurant_id])
          )
        ),
        db.query(
          format(
            `
              INSERT INTO users (name) VALUES %L;
            `,
            userData.map(({ name }) => [name])
          )
        ),
        db.query(
          format(
            `
              INSERT INTO opening_times (restaurant_id, opening_time, closing_time) VALUES %L;
            `,
            openingTimesData.map(({ restaurant_id, start_time, end_time }) => [
              restaurant_id,
              new Date(start_time),
              new Date(end_time),
            ])
          )
        ),
      ])
    )
    .then(() =>
      db.query(
        format(
          `
          INSERT INTO bookings (table_id, user_id, start_time, end_time, party_size) VALUES %L;
        `,
          bookingData.map(({ table_id, user_id, time, number_of_guests }) => [
            table_id,
            user_id,
            new Date(time),
            new Date(time + 5400),
            number_of_guests,
          ])
        )
      )
    );
};
